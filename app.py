import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from model_training import ModelTrainer
from data_processing import DataProcessor
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∫–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º",
    page_icon="üè≠",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@st.cache_resource
def load_trained_models():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∑–æ–Ω (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
    """
    data_processor = DataProcessor()
    trainer = ModelTrainer(data_processor)

    if os.path.exists('models/temp_zone_model_info.pkl'):
        if trainer.load_models():
            return trainer, data_processor
        else:
            return None, None
    else:
        return None, None


def create_default_feature_info():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    """
    try:
        df = pd.read_csv('dataset.csv')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã
        feature_info_by_zone = {}
        temp_zones = ['–°—É—Ö–æ–π', '–•–æ–ª–æ–¥', '–ó–∞–º–æ—Ä–æ–∑–∫–∞']

        for zone in temp_zones:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω–µ
            zone_data = df[df['temp_zone'] == zone]

            if not zone_data.empty:
                feature_info_by_zone[zone] = {
                    'sku_count': {
                        'min': int(zone_data['sku_count'].min()),
                        'max': int(zone_data['sku_count'].max()),
                        'mean': round(zone_data['sku_count'].mean(), 0)
                    },
                    'accepted_quantity': {
                        'min': int(zone_data['accepted_quantity'].min()),
                        'max': int(zone_data['accepted_quantity'].max()),
                        'mean': round(zone_data['accepted_quantity'].mean(), 0)
                    },
                    'accepted_weight_kg': {
                        'min': round(zone_data['accepted_weight_kg'].min(), 2),
                        'max': round(zone_data['accepted_weight_kg'].max(), 2),
                        'mean': round(zone_data['accepted_weight_kg'].mean(), 2)
                    },
                    'accepted_volume_litr': {
                        'min': round(zone_data['accepted_volume_litr'].min(), 2),
                        'max': round(zone_data['accepted_volume_litr'].max(), 2),
                        'mean': round(zone_data['accepted_volume_litr'].mean(), 2)
                    }
                }
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–æ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                feature_info_by_zone[zone] = {
                    'sku_count': {'min': 1, 'max': 100, 'mean': 20},
                    'accepted_quantity': {'min': 10, 'max': 1000, 'mean': 100},
                    'accepted_weight_kg': {'min': 0.1, 'max': 50.0, 'mean': 10.0},
                    'accepted_volume_litr': {'min': 0.1, 'max': 20.0, 'mean': 5.0}
                }

        return feature_info_by_zone

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
        default_values = {
            'sku_count': {'min': 1, 'max': 100, 'mean': 20},
            'accepted_quantity': {'min': 10, 'max': 1000, 'mean': 100},
            'accepted_weight_kg': {'min': 0.1, 'max': 50.0, 'mean': 10.0},
            'accepted_volume_litr': {'min': 0.1, 'max': 20.0, 'mean': 5.0}
        }

        return {zone: default_values for zone in ['–°—É—Ö–æ–π', '–•–æ–ª–æ–¥', '–ó–∞–º–æ—Ä–æ–∑–∫–∞']}


def create_temp_zone_inputs():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∑–æ–Ω —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    st.header("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—ë–º–∫–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∑–æ–Ω
    temp_zones = ['–°—É—Ö–æ–π', '–•–æ–ª–æ–¥', '–ó–∞–º–æ—Ä–æ–∑–∫–∞']

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∑–æ–Ω–∞–º")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    cols = st.columns([2] + [1.5] * len(temp_zones))

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cols[0].write("**–ü–∞—Ä–∞–º–µ—Ç—Ä**")
    for i, zone in enumerate(temp_zones):
        cols[i + 1].write(f"**{zone}**")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    feature_info_by_zone = create_default_feature_info()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    zone_inputs = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
    for zone in temp_zones:
        zone_inputs[zone] = {}

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    parameters = [
        ('sku_count', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU', '—à—Ç'),
        ('accepted_quantity', '–ü—Ä–∏–Ω—è—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—à—Ç'),
        ('accepted_weight_kg', '–í–µ—Å –ø—Ä–∏—ë–º–∫–∏', '–∫–≥'),
        ('accepted_volume_litr', '–û–±—ä—ë–º –ø—Ä–∏—ë–º–∫–∏', '–ª')
    ]

    for param_key, param_name, unit in parameters:
        cols = st.columns([2] + [1.5] * len(temp_zones))
        cols[0].write(f"{param_name} ({unit}):")

        for i, zone in enumerate(temp_zones):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω—ã
            default_value = feature_info_by_zone[zone][param_key]['mean']
            min_value = feature_info_by_zone[zone][param_key]['min']
            max_value = feature_info_by_zone[zone][param_key]['max']

            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–æ–¥–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
            if param_key in ['accepted_weight_kg', 'accepted_volume_litr']:
                zone_inputs[zone][param_key] = cols[i + 1].number_input(
                    f"{param_name}_{zone}",
                    value=float(default_value),
                    min_value=float(min_value),
                    max_value=float(max_value),
                    step=0.1,
                    format="% .2f",
                    key=f"{param_key}_{zone}",
                    label_visibility="collapsed",
                    help=f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {zone}: {default_value:_.2f} {unit}".replace('_', ' ')
                )
            else:
                zone_inputs[zone][param_key] = cols[i + 1].number_input(
                    f"{param_name}_{zone}",
                    value=int(default_value),
                    min_value=int(min_value),
                    max_value=int(max_value),
                    step=1,
                    key=f"{param_key}_{zone}",
                    label_visibility="collapsed",
                    help=f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {zone}: {int(default_value)} {unit}"
                )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–æ–Ω–∞–º –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –±–ª–æ–∫–µ
    with st.expander("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º"):
        st.subheader("–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –∑–æ–Ω–∞–º")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_data = []
        for zone in temp_zones:
            stats_data.append({
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞': zone,
                '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU': int(feature_info_by_zone[zone]['sku_count']['mean']),
                '–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–∏–Ω—è—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': int(feature_info_by_zone[zone]['accepted_quantity']['mean']),
                '–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (–∫–≥)': feature_info_by_zone[zone]['accepted_weight_kg']['mean'],
                '–°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º (–ª)': feature_info_by_zone[zone]['accepted_volume_litr']['mean']
            })

        df_stats = pd.DataFrame(stats_data)
        st.dataframe(df_stats, use_container_width=True, hide_index=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        col1, col2 = st.columns(2)

        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –≤–µ—Å–æ–≤ –ø–æ –∑–æ–Ω–∞–º
            fig_weight = px.bar(
                x=temp_zones,
                y=[feature_info_by_zone[zone]['accepted_weight_kg']['mean'] for zone in temp_zones],
                title="–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –ø—Ä–∏—ë–º–∫–∏ –ø–æ –∑–æ–Ω–∞–º",
                labels={'x': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞', 'y': '–í–µ—Å (–∫–≥)'},
                color=temp_zones
            )
            fig_weight.update_layout(height=300, showlegend=False)
            st.plotly_chart(fig_weight, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –æ–±—ä—ë–º–æ–≤ –ø–æ –∑–æ–Ω–∞–º
            fig_volume = px.bar(
                x=temp_zones,
                y=[feature_info_by_zone[zone]['accepted_volume_litr']['mean'] for zone in temp_zones],
                title="–°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º –ø—Ä–∏—ë–º–∫–∏ –ø–æ –∑–æ–Ω–∞–º",
                labels={'x': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞', 'y': '–û–±—ä—ë–º (–ª)'},
                color=temp_zones
            )
            fig_volume.update_layout(height=300, showlegend=False)
            st.plotly_chart(fig_volume, use_container_width=True)

    return zone_inputs, temp_zones


def create_additional_inputs():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–≤–æ–¥–∞
    """
    st.header("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–ª–∞–¥–∞")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç –ø–æ –∑–æ–Ω–∞–º")
        gates = {}
        gates['–°—É—Ö–æ–π'] = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç - –°—É—Ö–æ–π:",
            value=5,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ—Ä–æ—Ç –≤ —Å—É—Ö–æ–π –∑–æ–Ω–µ"
        )
        gates['–•–æ–ª–æ–¥'] = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç - –•–æ–ª–æ–¥:",
            value=3,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ—Ä–æ—Ç –≤ —Ö–æ–ª–æ–¥–Ω–æ–π –∑–æ–Ω–µ"
        )
        gates['–ó–∞–º–æ—Ä–æ–∑–∫–∞'] = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç - –ó–∞–º–æ—Ä–æ–∑–∫–∞:",
            value=2,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ—Ä–æ—Ç –≤ –∑–æ–Ω–µ –∑–∞–º–æ—Ä–æ–∑–∫–∏"
        )

    with col2:
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        unload_time = st.number_input(
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–π –¢–° (–º–∏–Ω):",
            value=0.0,
            step=1.0,
            format="% .1f",
            help="–í—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"
        )

        shift_hours = st.number_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ —Å–º–µ–Ω–µ, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –ø—Ä–∏—ë–º–∫—É:",
            value=8.0,
            step=0.5,
            format="% .1f",
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –≤ —Å–º–µ–Ω–µ –¥–ª—è –ø—Ä–∏—ë–º–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
        )

    return gates, unload_time, shift_hours


def create_demo_prediction(inputs, temp_zone):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º—É–ª—ã
    """
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã
    base_prediction = (
            inputs['sku_count'] * 0.5 +
            inputs['accepted_quantity'] * 0.1 +
            inputs['accepted_weight_kg'] * 2 +
            inputs['accepted_volume_litr'] * 1.5
    )

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω–µ
    zone_multipliers = {
        '–°—É—Ö–æ–π': 1.0,
        '–•–æ–ª–æ–¥': 1.2,
        '–ó–∞–º–æ—Ä–æ–∑–∫–∞': 1.5
    }

    prediction = base_prediction * zone_multipliers.get(temp_zone, 1.0)
    prediction += np.random.normal(0, 2)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    prediction = max(5, prediction)

    return prediction


def calculate_capacity_metrics(avg_times, gates, unload_time, shift_hours, zone_inputs):
    """
    –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–∞
    """
    results = {}

    for zone in avg_times.keys():
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—ë–º–æ–∫
        total_time_per_reception = unload_time + avg_times[zone]
        if total_time_per_reception > 0:
            receptions_per_shift = (gates[zone] * shift_hours * 60) / total_time_per_reception
        else:
            receptions_per_shift = 0

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –≤–µ—Å–∞
        total_weight_per_shift = (zone_inputs[zone]['accepted_weight_kg'] *
                                  gates[
                                      zone] * shift_hours * 60) / total_time_per_reception if total_time_per_reception > 0 else 0

        results[zone] = {
            'avg_time': avg_times[zone],
            'receptions_per_shift': receptions_per_shift,
            'total_weight_per_shift': total_weight_per_shift
        }

    return results


def create_results_visualization(results):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º")

    results_data = []
    for zone, metrics in results.items():
        results_data.append({
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞': zone,
            '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏ (–º–∏–Ω)': f"{metrics['avg_time']:_.1f}".replace('_', ' '),
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–∫ –∑–∞ —Å–º–µ–Ω—É': f"{metrics['receptions_per_shift']:_.1f}".replace('_', ' '),
            '–û–±—â–∏–π –≤–µ—Å –∑–∞ —Å–º–µ–Ω—É (–∫–≥)': f"{metrics['total_weight_per_shift']:_.1f}".replace('_', ' ')
        })

    df_results = pd.DataFrame(results_data)
    st.dataframe(df_results, use_container_width=True, hide_index=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns(2)

    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—ë–º–∫–∏
        fig_time = px.bar(
            x=list(results.keys()),
            y=[metrics['avg_time'] for metrics in results.values()],
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏ –ø–æ –∑–æ–Ω–∞–º",
            labels={'x': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞', 'y': '–í—Ä–µ–º—è (–º–∏–Ω)'},
            color=list(results.keys())
        )
        fig_time.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig_time, use_container_width=True)

    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—ë–º–æ–∫ –∑–∞ —Å–º–µ–Ω—É
        fig_capacity = px.bar(
            x=list(results.keys()),
            y=[metrics['receptions_per_shift'] for metrics in results.values()],
            title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–∫ –∑–∞ —Å–º–µ–Ω—É",
            labels={'x': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–∫'},
            color=list(results.keys())
        )
        fig_capacity.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig_capacity, use_container_width=True)

    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ –≤–µ—Å–∞
    fig_weight = px.bar(
        x=list(results.keys()),
        y=[metrics['total_weight_per_shift'] for metrics in results.values()],
        title="–û–±—â–∏–π –ø—Ä–∏–Ω—è—Ç—ã–π –≤–µ—Å –∑–∞ —Å–º–µ–Ω—É –ø–æ –∑–æ–Ω–∞–º",
        labels={'x': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –∑–æ–Ω–∞', 'y': '–í–µ—Å (–∫–≥)'},
        color=list(results.keys())
    )
    fig_weight.update_layout(height=400, showlegend=False)
    st.plotly_chart(fig_weight, use_container_width=True)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üè≠ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∫–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º")
    st.markdown("""
    –°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–ª–∞–¥–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º –∑–æ–Ω–∞–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—ë–º–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
    """)

    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    trainer, data_processor = load_trained_models()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
    if trainer is not None and data_processor is not None:
        model_status = "‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        use_real_models = True
        available_zones = trainer.get_available_temp_zones()
        st.success(f"{model_status}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã: {', '.join(available_zones)}")
    else:
        model_status = "‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º."
        use_real_models = False
        st.warning(model_status)
        st.info("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: `python model_training.py`")

    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
    zone_inputs, temp_zones = create_temp_zone_inputs()
    gates, unload_time, shift_hours = create_additional_inputs()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    # with st.sidebar:
    #     st.header("üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    #
    #     st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç")
    #     for zone, count in gates.items():
    #         st.write(f"**{zone}:** {count}")
    #
    #     st.subheader("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    #     st.write(f"**–í—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –¢–°:** {unload_time} –º–∏–Ω")
    #     st.write(f"**–ß–∞—Å–æ–≤ –≤ —Å–º–µ–Ω–µ:** {shift_hours} —á")
    #
    #     if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
    #         st.cache_resource.clear()
    #         st.rerun()

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        calculate_button = st.button(
            "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–ª–∞–¥–∞",
            type="primary",
            use_container_width=True
        )

    if calculate_button:
        with st.spinner('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç...'):
            # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—ë–º–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
            avg_times = {}

            for zone in temp_zones:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                input_df = pd.DataFrame([zone_inputs[zone]])

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if use_real_models and zone in trainer.get_available_temp_zones():
                    prediction = trainer.predict_for_temp_zone(input_df, zone)
                else:
                    prediction = create_demo_prediction(zone_inputs[zone], zone)

                avg_times[zone] = prediction if prediction is not None else 30.0

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            results = calculate_capacity_metrics(avg_times, gates, unload_time, shift_hours, zone_inputs)

        st.success("–†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        create_results_visualization(results)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("‚ÑπÔ∏è –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤"):
            st.markdown("""
            **–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞:**

            1. **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—ë–º–æ–∫ –∑–∞ —Å–º–µ–Ω—É:**
               ```
               –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç √ó –ß–∞—Å—ã –≤ —Å–º–µ–Ω–µ √ó 60 / (–í—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –¢–° + –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏)
               ```

            2. **–û–±—â–∏–π –ø—Ä–∏–Ω—è—Ç—ã–π –≤–µ—Å –∑–∞ —Å–º–µ–Ω—É:**
               ```
               –í–µ—Å –ø—Ä–∏—ë–º–∫–∏ √ó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–æ—Ç √ó –ß–∞—Å—ã –≤ —Å–º–µ–Ω–µ √ó 60 / (–í—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –¢–° + –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏)
               ```

            **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞:**
            - –í—Ä–µ–º—è –ø—Ä–∏—ë–º–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã
            - –£—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
            - –†–∞—Å—á–µ—Ç –≤–µ–¥–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ—Ä–æ—Ç –≤ –∫–∞–∂–¥–æ–π –∑–æ–Ω–µ
            """)

            if use_real_models:
                st.markdown("""
                **–û –º–æ–¥–µ–ª—è—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:**
                - –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–π –∑–æ–Ω—ã –æ–±—É—á–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
                - –ú–æ–¥–µ–ª–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SKU, –ø—Ä–∏–Ω—è—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–µ—Å –∏ –æ–±—ä—ë–º
                - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (AutoML)
                """)
            else:
                st.markdown("""
                **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:**
                - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—ë–º–∫–∏
                - –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                """)


if __name__ == "__main__":
    main()
